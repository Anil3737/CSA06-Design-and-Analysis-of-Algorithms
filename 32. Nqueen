#include <stdio.h>
#include <stdbool.h>

#define N 8 // Change N to the desired board size

int board[N][N];

// Function to check if a queen can be placed in the current position
bool isSafe(int row, int col) {
    // Check the row on the left side
    for (int i = 0; i < col; i++) {
        if (board[row][i]) {
            return false;
        }
    }

    // Check the upper diagonal on the left side
    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j]) {
            return false;
        }
    }

    // Check the lower diagonal on the left side
    for (int i = row, j = col; i < N && j >= 0; i++, j--) {
        if (board[i][j]) {
            return false;
        }
    }

    return true;
}

// Function to solve the N-Queens problem using backtracking
bool solveNQueens(int col) {
    if (col >= N) {
        // All queens have been successfully placed
        return true;
    }

    for (int i = 0; i < N; i++) {
        if (isSafe(i, col)) {
            board[i][col] = 1;

            if (solveNQueens(col + 1)) {
                return true;
            }

            // If placing the queen in the current position does not lead to a solution, backtrack
            board[i][col] = 0;
        }
    }

    // If no position is safe for this column, return false
    return false;
}

// Function to print the N-Queens solution
void printSolution() {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            printf("%2d ", board[i][j]);
        }
        printf("\n");
    }
}

int main() {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            board[i][j] = 0;
        }
    }

    if (solveNQueens(0)) {
        printf("Solution exists:\n");
        printSolution();
    } else {
        printf("No solution exists for N = %d\n", N);
    }

    return 0;
}
